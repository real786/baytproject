const express = require('express');
const Stripe = require('stripe');
const fs = require('fs')
const path = require('path')
const app = express();
const stripe = Stripe('sk_test_51Qf0ZGL1wtw2ceuLxdkSiXr5xwxUUHa9ptxalXiac43JqQDzhD67hORyMXUAZ7NbfUoYpgQcbsEX617Ls0jWufbc00JOvZkv0g'); // Replace with your Stripe secret key


const nodemailer = require('nodemailer');

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.set('view engine' , 'ejs');
app.set('views' , './views');

app.use(express.static('public'));


app.get('/', async (req, res) => {
    try {
        // Fetch products from Stripe and expand the default_price
        const products = await stripe.products.list({ expand: ['data.default_price'], limit: 3 });

        // Sort products by creation date (descending order)
        const sortedProducts = products.data.sort((a, b) => new Date(b.created) - new Date(a.created));

        // Render products to the EJS template
        res.render('home', { products: sortedProducts });
    } catch (error) {
        console.error('Error fetching products:', error);
        res.status(500).send('Failed to fetch products');
    }
});

app.get('/products', async (req, res)=>{
    try {
        // Fetch products from Stripe
        const products = await stripe.products.list({ expand: ['data.default_price'] });

        // Render products to the EJS template
        res.render('products', { products: products.data });
    } catch (error) {
        console.error('Error fetching products:', error);
        res.status(500).send('Failed to fetch products');
    }
})

app.get('/about', async ( req, res)=>{
    res.render('about');
})


// Set the initial countdown time (7 days in seconds)
const initialCountdownTime = 7 * 24 * 60 * 60; // 7 days in seconds

// Store the countdown start time globally (for example, in a simple variable or DB)
let countdownStartTime = Math.floor(Date.now() / 1000); // Store the current time (seconds)

app.get('/offer',(_,res)=>{
    res.render('offer' , {consistentTime: countdownStartTime})
})

app.get('/success',(_,res)=>{
    res.render('success')
})

app.get('/contact' , ( _ , res ) => {
    res.render('contact')
})


// Route to create a checkout session
app.post('/create-checkout-session', express.json(), async (req, res) => {
    const { priceId } = req.body; // Expect priceId from the client
    if (!priceId) {
        return res.status(400).send('Price ID is required');
    }

    try {
        // Create a Checkout Session
        const session = await stripe.checkout.sessions.create({
            payment_method_types: ['card'],
            line_items: [
                {
                    price: priceId,
                    quantity: 1,
                },
            ],
            mode: 'payment',
            success_url: 'http://localhost:3000/success',
            cancel_url: 'http://localhost:3000/cancel',
        });

        res.json({ url: session.url });
    } catch (error) {
        console.error('Error creating checkout session:', error);
        res.status(500).send('Failed to create checkout session');
    }
});




// Create a transporter for sending the email (using Gmail as an example)
const transporter = nodemailer.createTransport({
    service: 'gmail', // or your preferred email service
    auth: {
        user: 'your gmail', // Replace with your email
        pass: 'app password generated by gmail'   // Use your app-specific password or email password
    }
});

// Send Email Function
async function sendEmail(name, email, message) {
    const mailOptions = {
        from: email, // Sender's email
        to: 'yourcompany@example.com', // Replace with the recipient email
        subject: `New Contact Us Message from ${name}`,
        html: `
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>New Contact Us Message</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        background-color: #f9f9f9;
                        margin: 0;
                        padding: 0;
                    }
                    .email-container {
                        width: 100%;
                        background-color: #ffffff;
                        padding: 20px;
                    }
                    .email-header {
                        background-color: #28a745;
                        color: #ffffff;
                        padding: 20px;
                        text-align: center;
                    }
                    .email-header h1 {
                        margin: 0;
                        font-size: 24px;
                    }
                    .email-body {
                        padding: 20px;
                    }
                    .email-body h2 {
                        color: #333;
                        font-size: 22px;
                        margin-bottom: 10px;
                    }
                    .email-body p {
                        font-size: 16px;
                        color: #555;
                        margin-bottom: 20px;
                    }
                    .email-body .details {
                        margin-bottom: 20px;
                    }
                    .email-body .details p {
                        margin: 8px 0;
                    }
                    .email-footer {
                        text-align: center;
                        font-size: 14px;
                        color: #777;
                        margin-top: 40px;
                    }
                    .email-footer a {
                        color: #28a745;
                        text-decoration: none;
                    }
                </style>
            </head>
            <body>
                <div class="email-container">
                    <div class="email-header">
                        <h1>New Contact Us Message</h1>
                    </div>
                    <div class="email-body">
                        <h2>You have received a new message from the contact form!</h2>
                        <div class="details">
                            <p><strong>Name:</strong> ${name}</p>
                            <p><strong>Email:</strong> ${email}</p>
                            <p><strong>Message:</strong></p>
                            <p>${message}</p>
                        </div>
                        <p>We recommend you to respond as soon as possible to keep the customer engaged.</p>
                    </div>
                    <div class="email-footer">
                        <p>Thank you for your prompt attention.</p>
                        <p>Bayt Store | <a href="mailto:support@bayt.com">support@bayt.com</a></p>
                    </div>
                </div>
            </body>
            </html>
        `
    };

    try {
        await transporter.sendMail(mailOptions);
        console.log('Message sent successfully!');
    } catch (error) {
        console.error('Error sending email:', error);
    }
}


app.post('/send-message', async (req, res) => {
    const { name, email, message } = req.body;

    // Send email using Nodemailer
    await sendEmail(name, email, message);

    res.redirect('/success'); // Redirect to a success page after submission
});



app.post('/subscribe', (req, res) => {
    const email = req.body.email;

    if (!email) {
        return res.status(400).send('Email is required');
    }

    // Save the email to a file (or database)
    const filePath = path.join(__dirname, 'subscribers.txt');
    fs.appendFile(filePath, email + '\n', (err) => {
        if (err) {
            console.error('Failed to save email:', err);
            return res.status(500).send('Subscription failed');
        }

        console.log('Email saved:', email);

        // Send confirmation email
        sendSubscriptionEmail(email)
            .then(() => {
                res.send(`
                    <h2>Subscription Successful!</h2>
                    <p>Thank you for subscribing. Please check your email for confirmation.</p>
                    <a href="/">Back to Home</a>
                `);
            })
            .catch((err) => {
                console.error('Failed to send email:', err);
                res.send(`
                    <h2>Subscription Successful</h2>
                    <p>Your email was saved, but the confirmation email could not be sent.</p>
                    <a href="/">Back to Home</a>
                `);
            });
    });
});

// Function to send confirmation email
async function sendSubscriptionEmail(email) {
    const transporter = nodemailer.createTransport({
        service: 'gmail', // Use Gmail's SMTP server
        auth: {
            user: 'your-email@gmail.com', // Replace with your email
            pass: 'your-email-app-password', // Use app-specific password
        },
    });

    const mailOptions = {
        from: '"Bayt Offers" <your-email@gmail.com>', // Sender info
        to: email, // Recipient
        subject: 'Subscription Confirmation - Bayt Offers',
        html: `
            <h1>Welcome to Bayt Offers!</h1>
            <p>Thank you for subscribing to our exclusive offers. You will now receive the latest updates and discounts straight to your inbox.</p>
            <p>Stay tuned for great deals!</p>
            <br>
            <footer>
                <p>If you did not subscribe, please ignore this email.</p>
            </footer>
        `,
    };

    // Send the email
    return transporter.sendMail(mailOptions);
}




// Start the server
app.listen(3000, () => {
    console.log('Server is running on http://localhost:3000');
});
